# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо
# только числами. Класс-исключение должен контролировать типы данных элементов списка. Примечание: длина списка не
# фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например,
# команду «stop». При этом скрипт завершается, сформированный список с числами выводится на экран. Подсказка: для
# этого задания примем, что пользователь может вводить только числа и строки. Во время ввода пользователем очередного
# элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class NumberParseException(Exception):

    def __init__(self):
        self.txt = 'Вы добавляете не число'
        self.list_of_nums = []

    def append(self, item):

        if item.isnumeric():
            self.list_of_nums.append(int(item))
        else:
            raise NumberParseException

    def __str__(self):
        return ', '.join([str(el) for el in self.list_of_nums])


my_list = NumberParseException()

while True:
    try:
        value = input('Какое число добавить в список? (для выхода напишите "stop"): ')
        if value == 'stop':
            break

        my_list.append(value)
    except NumberParseException as e:
        print(e.txt)

print(f'my_list: {my_list}')
